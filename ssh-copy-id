#!/bin/sh

# Copyright (c) 1999-2010 Philip Hands <phil@hands.com>
#               2010 Eric Moret <eric.moret@gmail.com>
#               2009 Xr <xr@i-jeuxvideo.com>
#               2007 Justin Pryzby <justinpryzby@users.sourceforge.net>
#               2004 Reini Urban <rurban@x-ray.at>
# Modification and redistribution is permitted provided that due credit
# is given to the authors by leaving this copyright notice intact.

# Shell script to install your public key(s) on a remote machine
# See the ssh-copy-id(1) man page for details

ID_FILE=$(ls -t ${HOME}/.ssh/id*.pub | head -n 1)

usage () {
  echo "Usage: $0 [-i identity_file] [-p port] [user@]hostname" >&2
  exit 1
}

use_id_file() {
  GET_ID="cat \"$1\""
  PRIV_ID_FILE=$(dirname "$1")/$(basename "$1" .pub)
}

if [ -n "$SSH_AUTH_SOCK" ] && ssh-add -L >/dev/null 2>&1 ; then
  GET_ID="ssh-add -L"
fi

while getopts 'i:p:h?' OPTION ; do
  case "$OPTION" in
    i)
      if [ -n "$OPTARG" ] ; then
        if expr "$OPTARG" : ".*\.pub$" >/dev/null ; then
          ID_FILE="$OPTARG"
        else
          ID_FILE="$OPTARG.pub"
        fi
        if [ ! -r "$OPTARG" ] ; then
          usage
        fi
      fi
      use_id_file $ID_FILE
      ;;
    p)
      if 2>/dev/null [ "$OPTARG" -gt 0 ] && [ "$OPTARG" -lt 65536 ] ; then
        PORTOPTION="-p $OPTARG "
      else
        echo "Bad port '$OPTARG'" >&2
        exit 1
      fi
      ;;
    h|\?)
      usage
      ;;
  esac
done

shift $(($OPTIND - 1))

if [ $# != 1 ] ; then
  usage
fi

# drop a trailing colon
USER_HOST=${1%:}

if [ -z "$(eval $GET_ID)" ] && [ -r "$ID_FILE" ] ; then
  use_id_file $ID_FILE
fi

if [ -z "$(eval $GET_ID)" ] ; then
  echo "$0: ERROR: No identities found" >&2
  exit 1
fi

populate_new_ids() {
  local L_USER_HOST="$1"
  local SUCCESS="$2"

  ID_FILE_TEMP=$(mktemp ~/.ssh/ssh-copy-id_id.XXXXXXXXXX)
  trap "rm -f $ID_FILE_TEMP" EXIT TERM INT QUIT
  NEW_IDS=$(
    eval $GET_ID | {
      while line > $ID_FILE_TEMP ; do
        ssh -i "${PRIV_ID_FILE:-$ID_FILE_TEMP}" \
            -o PreferredAuthentications=publickey \
            -o IdentitiesOnly=yes $PORTOPTION $L_USER_HOST exit >/dev/null 2>&1

        if [ "$?" != "$SUCCESS" ] ; then
          cat $ID_FILE_TEMP
        fi
      done
    }
  )
  rm -f "$ID_FILE_TEMP" && trap - EXIT TERM INT QUIT

  if [ -z "$NEW_IDS" ] ; then
    printf "\n$0: WARNING: All keys were skipped because they already exist on the remote system.\n\n" >&2
    exit 0
  fi
}

REMOTE_VERSION=$(ssh -v -o PreferredAuthentications=',' $PORTOPTION $USER_HOST 2>&1 |
                 sed -ne 's/.*remote software version //p')

case "$REMOTE_VERSION" in
  NetScreen*)
    populate_new_ids $USER_HOST 1
    for KEY in $(echo "$NEW_IDS"| cut -d' ' -f2) ; do
      printf 'set ssh pka-dsa key %s\nsave\nexit\n' "$KEY" | ssh -T $PORTOPTION $USER_HOST >/dev/null 2>&1
      if [ $? == 255 ] ; then
	echo "$0: WARNING: NetScreen only supports dsa keys" >&2
      else
        ADDED=$(($ADDED + 1))
      fi
    done
    if [ -z "$ADDED" ] ; then
      exit 1
    fi
    ;;
  *)
    # Assuming default being OpenSSH
    populate_new_ids $USER_HOST 0
    printf "$NEW_IDS\n" | ssh $PORTOPTION $USER_HOST "umask 077 ; mkdir -p .ssh ; cat >> .ssh/authorized_keys" || exit 1
    ADDED=$( { printf "$NEW_IDS" ; echo ; } | wc -l)
    ;;
esac

cat <<-EOF

	Number of key(s) added: $ADDED

	Now try logging into the machine, with "ssh $PORTOPTION'$USER_HOST'", and check
	to make sure we haven't added extra keys that you weren't expecting.

EOF
